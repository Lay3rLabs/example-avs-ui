{
  "contract_name": "lavs-mock-operators",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "operators"
    ],
    "properties": {
      "operators": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/InstantiateOperator"
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "InstantiateOperator": {
        "type": "object",
        "required": [
          "addr",
          "voting_power"
        ],
        "properties": {
          "addr": {
            "description": "The address of the operator",
            "type": "string"
          },
          "voting_power": {
            "description": "Their voting power",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "type": "string",
    "enum": []
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Based on what is generated by #[voting_query] macro in dao dao",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "voting_power_at_height"
        ],
        "properties": {
          "voting_power_at_height": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "height": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "total_power_at_height"
        ],
        "properties": {
          "total_power_at_height": {
            "type": "object",
            "properties": {
              "height": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "all_voters"
        ],
        "properties": {
          "all_voters": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_voters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllVotersResponse",
      "type": "object",
      "required": [
        "voters"
      ],
      "properties": {
        "voters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VoterInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "VoterInfo": {
          "type": "object",
          "required": [
            "address",
            "power"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "power": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "total_power_at_height": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TotalPowerResponse",
      "description": "Copy of dao_interface::voting::TotalPowerAtHeightResponse",
      "type": "object",
      "required": [
        "height",
        "power"
      ],
      "properties": {
        "height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "power": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "voting_power_at_height": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VotingPowerResponse",
      "description": "Copy of dao_interface::voting::VotingPowerAtHeightResponse",
      "type": "object",
      "required": [
        "height",
        "power"
      ],
      "properties": {
        "height": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "power": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
