{
  "contract_name": "lavs-task-queue",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "requestor",
      "timeout",
      "verifier"
    ],
    "properties": {
      "requestor": {
        "description": "Who can create new tasks",
        "allOf": [
          {
            "$ref": "#/definitions/Requestor"
          }
        ]
      },
      "timeout": {
        "description": "Timeout configuration for the tasks",
        "allOf": [
          {
            "$ref": "#/definitions/TimeoutInfo"
          }
        ]
      },
      "verifier": {
        "description": "Which contract can verify results",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Requestor": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fixed"
            ],
            "properties": {
              "fixed": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "open_payment"
            ],
            "properties": {
              "open_payment": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TimeoutInfo": {
        "description": "All timeouts are defined in seconds If minimum and maximum are undefined, the default value is used",
        "type": "object",
        "required": [
          "default"
        ],
        "properties": {
          "default": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "maximum": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "minimum": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "anyOf": [
      {
        "description": "Complete and any other public APIs in the interface",
        "allOf": [
          {
            "$ref": "#/definitions/TaskExecuteMsg"
          }
        ]
      },
      {
        "description": "The messages unique to this contract implementation",
        "allOf": [
          {
            "$ref": "#/definitions/CustomExecuteMsg"
          }
        ]
      }
    ],
    "definitions": {
      "CustomExecuteMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "create"
            ],
            "properties": {
              "create": {
                "type": "object",
                "required": [
                  "description",
                  "payload"
                ],
                "properties": {
                  "description": {
                    "description": "Human-readable description of the task",
                    "type": "string"
                  },
                  "payload": {
                    "description": "Machine-readable data for the AVS to use FIXME: use generic T to enforce a AVS-specific format"
                  },
                  "timeout": {
                    "description": "Specify a task timeout, or use the default",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "timeout"
            ],
            "properties": {
              "timeout": {
                "type": "object",
                "required": [
                  "task_id"
                ],
                "properties": {
                  "task_id": {
                    "description": "The task ID to complete",
                    "allOf": [
                      {
                        "$ref": "#/definitions/TaskId"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TaskExecuteMsg": {
        "oneOf": [
          {
            "description": "This can only be called by the verifier contract",
            "type": "object",
            "required": [
              "complete"
            ],
            "properties": {
              "complete": {
                "type": "object",
                "required": [
                  "response",
                  "task_id"
                ],
                "properties": {
                  "response": {
                    "description": "The result of the task"
                  },
                  "task_id": {
                    "description": "The task ID to complete",
                    "allOf": [
                      {
                        "$ref": "#/definitions/TaskId"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TaskId": {
        "description": "An id for a task. This is a simple wrapper around a `Uint64` internally. Serialized on the wire as a string",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "anyOf": [
      {
        "description": "Complete and any other public APIs in the interface",
        "allOf": [
          {
            "$ref": "#/definitions/TaskQueryMsg"
          }
        ]
      },
      {
        "description": "The messages unique to this implementation",
        "allOf": [
          {
            "$ref": "#/definitions/CustomQueryMsg"
          }
        ]
      }
    ],
    "definitions": {
      "CustomQueryMsg": {
        "oneOf": [
          {
            "description": "Ordered by expiration time ascending",
            "type": "object",
            "required": [
              "list_open"
            ],
            "properties": {
              "list_open": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Ordered by completion time descending (last completed first)",
            "type": "object",
            "required": [
              "list_completed"
            ],
            "properties": {
              "list_completed": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Get specific task details",
            "type": "object",
            "required": [
              "task"
            ],
            "properties": {
              "task": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/definitions/TaskId"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Get task configuration",
            "type": "object",
            "required": [
              "config"
            ],
            "properties": {
              "config": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TaskId": {
        "description": "An id for a task. This is a simple wrapper around a `Uint64` internally. Serialized on the wire as a string",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "TaskQueryMsg": {
        "oneOf": [
          {
            "description": "Get specific task details",
            "type": "object",
            "required": [
              "task_status"
            ],
            "properties": {
              "task_status": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/definitions/TaskId"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "requestor",
        "timeout",
        "verifier"
      ],
      "properties": {
        "requestor": {
          "$ref": "#/definitions/Requestor"
        },
        "timeout": {
          "$ref": "#/definitions/TimeoutConfig"
        },
        "verifier": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Requestor": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "fixed"
              ],
              "properties": {
                "fixed": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "open_payment"
              ],
              "properties": {
                "open_payment": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "TimeoutConfig": {
          "description": "All timeouts are defined in seconds This is configured from `TimeoutInfo`, which is passed in the instantiate message",
          "type": "object",
          "required": [
            "default",
            "maximum",
            "minimum"
          ],
          "properties": {
            "default": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "maximum": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "minimum": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "list_completed": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListCompletedResponse",
      "type": "object",
      "required": [
        "tasks"
      ],
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompletedTaskOverview"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "CompletedTaskOverview": {
          "description": "Minimal information about a task",
          "type": "object",
          "required": [
            "completed",
            "id",
            "result"
          ],
          "properties": {
            "completed": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "id": {
              "$ref": "#/definitions/TaskId"
            },
            "result": true
          },
          "additionalProperties": false
        },
        "TaskId": {
          "description": "An id for a task. This is a simple wrapper around a `Uint64` internally. Serialized on the wire as a string",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "list_open": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListOpenResponse",
      "type": "object",
      "required": [
        "tasks"
      ],
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpenTaskOverview"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "OpenTaskOverview": {
          "description": "Minimal information about a task",
          "type": "object",
          "required": [
            "expires",
            "id",
            "payload"
          ],
          "properties": {
            "expires": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "id": {
              "$ref": "#/definitions/TaskId"
            },
            "payload": true
          },
          "additionalProperties": false
        },
        "TaskId": {
          "description": "An id for a task. This is a simple wrapper around a `Uint64` internally. Serialized on the wire as a string",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TaskResponse",
      "description": "This is detailed information about a task, including the payload",
      "type": "object",
      "required": [
        "description",
        "id",
        "payload",
        "status"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/TaskId"
        },
        "payload": true,
        "result": true,
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Status": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "open"
              ],
              "properties": {
                "open": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "completed"
              ],
              "properties": {
                "completed": {
                  "type": "object",
                  "required": [
                    "completed"
                  ],
                  "properties": {
                    "completed": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "expired"
              ],
              "properties": {
                "expired": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "TaskId": {
          "description": "An id for a task. This is a simple wrapper around a `Uint64` internally. Serialized on the wire as a string",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "task_status": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TaskStatusResponse",
      "description": "This is detailed information about a task, including the payload",
      "type": "object",
      "required": [
        "created_height",
        "created_time",
        "expires_time",
        "id",
        "status"
      ],
      "properties": {
        "created_height": {
          "description": "We need the height to query the voting power",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "created_time": {
          "description": "Time it was created in UNIX seconds",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "expires_time": {
          "description": "Expiration of the task in UNIX seconds",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "id": {
          "$ref": "#/definitions/TaskId"
        },
        "status": {
          "$ref": "#/definitions/TaskStatus"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "TaskId": {
          "description": "An id for a task. This is a simple wrapper around a `Uint64` internally. Serialized on the wire as a string",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "TaskStatus": {
          "type": "string",
          "enum": [
            "open",
            "completed",
            "expired"
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
