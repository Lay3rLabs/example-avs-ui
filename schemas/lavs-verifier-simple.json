{
  "contract_name": "lavs-verifier-simple",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "operator_contract",
      "required_percentage"
    ],
    "properties": {
      "operator_contract": {
        "description": "The contract storing the operator weights",
        "type": "string"
      },
      "required_percentage": {
        "description": "The percentage of voting power needed to agree in order to complete a task",
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "executed_task"
        ],
        "properties": {
          "executed_task": {
            "type": "object",
            "required": [
              "result",
              "task_id",
              "task_queue_contract"
            ],
            "properties": {
              "result": {
                "description": "The result of the task, (JSON) serialized as a string It is serialized to allow for easy comparison and to avoid field sorting issues when verifying signatures",
                "type": "string"
              },
              "task_id": {
                "description": "The ID of the task that was completed",
                "allOf": [
                  {
                    "$ref": "#/definitions/TaskId"
                  }
                ]
              },
              "task_queue_contract": {
                "description": "Task queue contract for which we completed the task",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "TaskId": {
        "description": "An id for a task. This is a simple wrapper around a `Uint64` internally. Serialized on the wire as a string",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "The contract configuration",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Ordered by completion time descending (last completed first)",
        "type": "object",
        "required": [
          "task_info"
        ],
        "properties": {
          "task_info": {
            "type": "object",
            "required": [
              "task_contract",
              "task_id"
            ],
            "properties": {
              "task_contract": {
                "description": "The task contract we are interested in",
                "type": "string"
              },
              "task_id": {
                "description": "The ID of the task we are interested in",
                "allOf": [
                  {
                    "$ref": "#/definitions/TaskId"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Ordered by completion time descending (last completed first)",
        "type": "object",
        "required": [
          "operator_vote"
        ],
        "properties": {
          "operator_vote": {
            "type": "object",
            "required": [
              "operator",
              "task_contract",
              "task_id"
            ],
            "properties": {
              "operator": {
                "description": "The operator whose vote we are interested in",
                "type": "string"
              },
              "task_contract": {
                "description": "The task contract we are interested in",
                "type": "string"
              },
              "task_id": {
                "description": "The ID of the task we are interested in",
                "allOf": [
                  {
                    "$ref": "#/definitions/TaskId"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "TaskId": {
        "description": "An id for a task. This is a simple wrapper around a `Uint64` internally. Serialized on the wire as a string",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "operator_contract",
        "required_percentage"
      ],
      "properties": {
        "operator_contract": {
          "description": "The contract storing the operator weights",
          "type": "string"
        },
        "required_percentage": {
          "description": "The percentage of voting power needed to agree in order to complete a task",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "operator_vote": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_OperatorVoteInfoResponse",
      "anyOf": [
        {
          "$ref": "#/definitions/OperatorVoteInfoResponse"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "OperatorVoteInfoResponse": {
          "type": "object",
          "required": [
            "power",
            "result"
          ],
          "properties": {
            "power": {
              "description": "The voting power of the operator for this task",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "result": {
              "description": "The result this operator voted for",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "task_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_TaskInfoResponse",
      "anyOf": [
        {
          "$ref": "#/definitions/TaskInfoResponse"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "TaskInfoResponse": {
          "type": "object",
          "required": [
            "power_needed",
            "status",
            "tallies"
          ],
          "properties": {
            "power_needed": {
              "description": "Total voting power needed to complete the task",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "status": {
              "description": "The current state of the task",
              "allOf": [
                {
                  "$ref": "#/definitions/TaskStatus"
                }
              ]
            },
            "tallies": {
              "description": "The various outstanding votes",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskTally"
              }
            }
          },
          "additionalProperties": false
        },
        "TaskStatus": {
          "type": "string",
          "enum": [
            "open",
            "completed",
            "expired"
          ]
        },
        "TaskTally": {
          "type": "object",
          "required": [
            "power",
            "result"
          ],
          "properties": {
            "power": {
              "description": "The total voting power for this result",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "result": {
              "description": "The result that was voted on",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
