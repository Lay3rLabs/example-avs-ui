/* eslint-disable @typescript-eslint/no-unused-vars */

/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Requestor, Uint128, InstantiateMsg, Coin, TimeoutInfo, ExecuteMsg, TaskExecuteMsg, TaskId, Uint64, CustomExecuteMsg, QueryMsg, TaskQueryMsg, CustomQueryMsg, ConfigResponse, TimeoutConfig, ListCompletedResponse, CompletedTaskOverview, ListOpenResponse, OpenTaskOverview, Status, TaskResponse, TaskStatus, TaskStatusResponse } from "../types/TaskQueue.types";
export interface TaskQueueReadOnlyInterface {
  contractAddress: string;
  api: (taskQueryMsg: TaskQueryMsg) => Promise<ApiResponse>;
  custom: (customQueryMsg: CustomQueryMsg) => Promise<CustomResponse>;
}
export class TaskQueueQueryClient implements TaskQueueReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.api = this.api.bind(this);
    this.custom = this.custom.bind(this);
  }
  api = async (taskQueryMsg: TaskQueryMsg): Promise<ApiResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      api: taskQueryMsg
    });
  };
  custom = async (customQueryMsg: CustomQueryMsg): Promise<CustomResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      custom: customQueryMsg
    });
  };
}
export interface TaskQueueInterface extends TaskQueueReadOnlyInterface {
  contractAddress: string;
  sender: string;
  api: (taskExecuteMsg: TaskExecuteMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  custom: (customExecuteMsg: CustomExecuteMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TaskQueueClient extends TaskQueueQueryClient implements TaskQueueInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.api = this.api.bind(this);
    this.custom = this.custom.bind(this);
  }
  api = async (taskExecuteMsg: TaskExecuteMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      api: taskExecuteMsg
    }, fee, memo, _funds);
  };
  custom = async (customExecuteMsg: CustomExecuteMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      custom: customExecuteMsg
    }, fee, memo, _funds);
  };
}
